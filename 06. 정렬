# 선택정렬, 배열 중 가장 작은 원소를 처음 원소와 자리 바꿈, 처음 원소 제외하고 이 작업 반복 수행
array = [7,5,9,0,3,1,6,2,4,8]

for i in range(len(array)):
  min_index  = i
  for j in range(i+1, len(array)):
    if array[min_index] > array[j]:
      min_index = j
  array[i], array[min_index] = array[min_index], array[i]

print(array)

# 삽입정렬, 2번째 원소부터 앞에 원소들에 위치 중 어디에 들어갈지 결정하는 작업
array = [7,5,9,0,3,1,6,2,4,8]

for i in range(1, len(array)):
  for j in range(i, 0, -1):
    if array[j] < array[j-1]:
      array[j], array[j-1] = array[j-1], array[j]
    else:
      break

print(array)

# 퀵정렬, 피벗(기준이 되는 수)을 기준으로 크고 작음을 나눔, 방법이 살짝 어려움
array = [5,7,9,0,3,1,6,2,4,8]

def quick_sort(array, start, end):
  if start >= end: #  원소가 1개인 경우는 종료 
    return
  pivot = start
  left = start + 1
  right = end
  while left <= right: 
    while left <= end and array[left] <= array[pivot]: # 피벗보다 큰 원소를 찾을 때까지반복 
      left += 1
    while right > start and array[right] >= array[pivot]: # 피벗보다 작은 원소를 찾을 때까지반복 
      right -= 1
    if left > right: # 엇갈렸을 때 작은 데이터와 피벗을 교체 
      array[right], array[pivot] = array[pivot], array[right]
    else: # 안 엇갈렸으면 작은데이터와 큰 데이터 교체 
      array[left], array[right] = array[right], array[left]
  quick_sort(array, start, right -1) # 분할 이후 왼쪽 부분과 오른쪽 부분 각각 정렬 수행  
  quick_sort(array, right +1, end)

quick_sort(array, 0, len(array)-1)
print(array) 

# 파이썬 장점을 살린 퀵정렬 코드
array = [5,7,9,0,3,1,6,2,4,8]

def quick_sort(array):
  if len(array) <= 1:
    return array

  pivot = array[0]
  tail = array[1:]

  left_side = [x for x in tail if x <= pivot] # 분할된 왼쪽 부분
  right_side = [x for x in tail if x > pivot] # 분할된 오른쪽 부분

  return quick_sort(left_side) + [pivot] + quick_sort(right_side)

print(quick_sort(array))
